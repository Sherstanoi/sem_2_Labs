
#include "FarmTest.hpp"
#include <cmath>
#include <cstring>
#include <fstream>
#include <iostream>
#include <ctime>

int money = 200;

int ListSeed = 4; //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º—è–Ω
const int LotSeed = 7; // –º–∞–∫—Å–∏–º—É–º —Å–µ–º—è–Ω(–¥–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–∫–∞—á–∫–∏)

Seed AllSeed[LotSeed]; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–µ–º—è–Ω
int YourSeeds[LotSeed];// –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
int AllYouSeed = 0;    // –≤—Å–µ–≥–æ —Å–µ–º—è–Ω

Vegatebles AllVegatebles[LotSeed]; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö –æ–≤–æ—â–µ–π
int YourVegatebles [LotSeed]; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
int AllYouVagetebles = 0;     // –≤—Å–µ –æ–≤–æ—â–∏

int ListSeedBed = 5;             //–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—è–¥–æ–∫ü™∫ü™π
const int LotSeedBed = 8;        //–º–∞–∫—Å–∏–º—É–º –≥—Ä—è–¥–æ–∫
SeedBed AllSeedBad[LotSeedBed];  //–ò–Ω—Ñ–∞


void start(){
    AllSeed[0].name = "–ü—à–µ–Ω–æ";    AllSeed[0].TimeGrowth = 10; AllSeed[0].BuyCost = 4;  AllSeed[0].SellCost = 3;  AllSeed[0].Number = 0;
    AllSeed[1].name = "–ú–æ—Ä–∫–æ–≤–∫–∞"; AllSeed[1].TimeGrowth = 20; AllSeed[1].BuyCost = 2;  AllSeed[1].SellCost = 1;  AllSeed[1].Number = 1;
    AllSeed[2].name = "–°–≤–µ–∫–ª–∞";   AllSeed[2].TimeGrowth = 30; AllSeed[2].BuyCost = 6;  AllSeed[2].SellCost = 5;  AllSeed[2].Number = 2;
    AllSeed[3].name = "–¢—ã–∫–≤–∞";    AllSeed[3].TimeGrowth = 60; AllSeed[3].BuyCost = 12; AllSeed[3].SellCost = 10; AllSeed[3].Number = 3;

    AllVegatebles[0].name = "–ü—à–µ–Ω–æ";    AllVegatebles[0].SellCost = 6;  AllVegatebles[0].Number = 0;
    AllVegatebles[1].name = "–ú–æ—Ä–∫–æ–≤–∫–∞"; AllVegatebles[1].SellCost = 4;  AllVegatebles[1].Number = 1;
    AllVegatebles[2].name = "–°–≤–µ–∫–ª–∞";   AllVegatebles[2].SellCost = 10; AllVegatebles[2].Number = 2;
    AllVegatebles[3].name = "–¢—ã–∫–≤–∞";    AllVegatebles[3].SellCost = 20; AllVegatebles[3].Number = 3;
}

void storehouse(){
    std::cout << "–í—ã –∞–º–±–∞—Ä–µ —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ y –≤–∞—Å –µ—Å—Ç—å)\ny –≤–∞—Å\n";
    std::cout << money << " –º–æ–Ω–µ—Ç\n";
    if (AllYouSeed != 0) {
        for (int i = 0; i < ListSeed; i++) {
            if (YourSeeds[i] != 0){
                std::cout << "—Å–µ–º–µ–Ω–∞ " << YourSeeds[i] << ' ' << AllSeed[i].name << '\n';
            }
        }
    }
    std::cout << AllYouVagetebles << '\n';
    if (AllYouVagetebles != 0) {
        for (int i = 0; i < ListSeed; i++) {
            if (YourVegatebles[i] != 0){
                std::cout << YourVegatebles[i] << ' ' << AllVegatebles[i].name << '\n';
            }
        }
    }
}

void shop() {
    while (true) {
        std::cout << "–í—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ç—É—Ç –º–æ–∂–Ω–æ —Ç–∏–ø–æ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–µ–º–µ–Ω–∞ –∏ –¥—Ä—É–≥—É—é —Ö—Ä–µ–Ω—å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞ –Ω–µ—Ç\n –≤–æ—Ç —á—Ç–æ y –Ω–∞—Å –µ—Å—Ç—å: \n";
        for (int i = 0; i < ListSeed; i++) {
            std::cout << i + 1 <<") " <<  AllSeed[i].name << ' ' << AllSeed[i].BuyCost << '\n';
        }

        std::cout << "–í—ã —Ö–æ—Ç–∏—Ç–µ:\n1) –∫—É–ø–∏—Ç—å\n2) –ø—Ä–æ–¥–∞—Ç—å\n3) –≤—ã–π—Ç–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞: \n";
        int way = 0;
        std::cin >> way;
        switch (way) {
            case 1:{
                std::cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ";
                int ind = 0, lot = 0;
                std::cin >> ind >> lot;
                if (ind > 0 && ind <= ListSeed && lot > 0 && AllSeed[ind - 1].BuyCost * lot <= money) {
                    money -= AllSeed[ind - 1].BuyCost * lot;
                    YourSeeds[ind - 1] += lot;
                    AllYouSeed += lot;
                } else {
                    std::cout << "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫";
                }
                break;
            }
            case 2:{
                std::cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ";
                int ind = 0, lot = 0;
                std::cin >> ind >> lot;
                if (ind > 0 && ind <= ListSeed && lot > 0 && YourSeeds[ind - 1] >= lot) {
                    money += AllSeed[ind - 1].BuyCost * lot;
                    YourSeeds[ind - 1] -= lot;
                    AllYouSeed -= lot;
                } else {
                    std::cout << "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫";
                }
                break;
            }
            case 3:{
                return;
                break;
            }
            default:{
                std::cout << "–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–ª –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Ç–∞–∫\n";
            }
        }
    }
}

void gardenOut() {
    std::cout << "–í—ã –≤ –≥—Ä—è–¥–∫–∞—Ö (—Å–æ–≤–µ—Ç –¥–Ω—è: –ù–µ –≤—ã—Ä–∞—â–∏–≤–∞–π—Ç–µ –∫–æ–Ω–∞–ø–ª—é)\n –í–æ—Ç –≤–∞—â–∏ –≥—Ä—è–¥–∫–∏\n";
    time_t timeNow = time (NULL);
    for(int i = 0; i < ListSeedBed; i++){
        if (AllSeedBad[i].buse) {
            if (AllSeed[AllSeedBad[i].NumberSeed].TimeGrowth - timeNow + AllSeedBad[i].TimeLanding > 0){
                std::cout << "ü™∫ " << AllSeed[AllSeedBad[i].NumberSeed].name << " –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è " << AllSeed[AllSeedBad[i].NumberSeed].TimeGrowth - timeNow + AllSeedBad[i].TimeLanding << '\n';
            } else {
                std::cout << "ü™∫ " << AllSeed[AllSeedBad[i].NumberSeed].name << " —Å–æ–∑—Ä–µ–ª\n";
            }
        }else {
            std::cout << "ü™π \n";
        }
    }
}

void garden(){
    while(true) {
        gardenOut();

        if (AllYouSeed != 0) {
            std::cout << "—Å–µ–º–µ–Ω–∞ ";
            for (int i = 0; i < ListSeed; i++) {
                if (YourSeeds[i] != 0){
                    std::cout << AllSeed[i].Number + 1 << ") " << AllSeed[i].name << ' ' << YourSeeds[i] << '\n';
                }
            }
            std::cout << "\n";
        } else {
            std::cout << "–£–≤–∞—Å –Ω–µ—Ç —Å–µ–º—è–Ω , –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Ö –Ω–∞–¥–æ –∫—É–ø–∏—Ç—å\n";
        }

        std::cout << "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?\n 1)–æ–±–Ω–æ–≤–∏—Ç—å\n 2)–ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞\n 3)—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ\n 4)*—Å–æ–±—Ä–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ\n 5)–æ–±—Ä–∞—Ç–Ω–æ\n";
        int way = 0;
        std::cin >> way;
        switch (way) {
            case 1:{
                break;
            }
            case 2:{
                std::cout << "–∫–∞–∫–∏–µ —Å–µ–º–µ–Ω–∞(–Ω–æ–º–µ—Ä) –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–∞–¥–∏—Ç—å ?\n";
                int ind = 0, lot = 0;
                std::cin >> ind >> lot;
                ind--;
                for(int i = 0; lot != 0 && i < ListSeedBed; i++){
                    if (!AllSeedBad[i].buse){
                        AllSeedBad[i].buse = true;
                        AllSeedBad[i].NumberSeed = ind;
                        AllSeedBad[i].TimeLanding = time (NULL);
                        lot--;
                        YourSeeds[ind]--;
                    }
                }
                break;
            }
            case 3:{
                for(int i = 0; i < ListSeedBed; i++) {
                    storehouse();
                    if (AllSeedBad[i].buse && AllSeed[AllSeedBad[i].NumberSeed].TimeGrowth - time (NULL) + AllSeedBad[i].TimeLanding <= 0) {
                        AllSeedBad[i].buse = false;
                        YourVegatebles[AllSeed[AllSeedBad[i].NumberSeed].Number]++;
                        AllYouVagetebles++;
                    }
                }
                break;
            }
            case 4:{

                break;
            }
            case 5:{
                return ;
            }
            default:{
                std::cout << "—á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ \n";
                break;
            }
        }
    }
}


void basicFarm() {
    start();
    while(true) {
        std::cout << "–ë–õ–ê –ë–õ–ê –ë–õ–ê –õ–û–†\n–∫y–¥a –ø–æ–π–¥–µ–º?\n 1) –æ–≥–æ—Ä–æ–¥\n 2) –º–∞–≥–∞–∑–∏–Ω\n 3) –∞–º–±–∞—Ä\n 4) –≤—ã—Ö–æ–¥ –Ω–∞—Ä—É–∂—É\n";
        int way = 0;
        std::cin >> way;
        switch (way) {
            case 1:{
                garden();
                break;
            }
            case 2:{
                shop();
                break;
            }
            case 3:{
                storehouse();
                break;
            }
            case 4:{
                return;
                break;
            }
            default:{
                std::cout << "—á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ \n";
                break;
            }
        }
    }
}
